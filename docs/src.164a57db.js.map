{"version":3,"sources":["../src/CoAnMoPluginCliV1.ts","src/Actions/help.ts","src/Actions/hue.ts","src/Actions/random.ts","src/Actions/version.ts","src/Actions/actions.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.164a57db.js","sourceRoot":"..","sourcesContent":["export interface ActionMetaI {\n  actions: ActionI[];\n  name: string;\n  version: string;\n}\n\nexport interface ActionI {\n  name: string;\n  summary: string;\n  fn: (args: string[], meta: ActionMetaI) => string;\n}\n\nexport class CoAnMoPluginCliV1 {\n  private $stdin: HTMLInputElement | null;\n  private $stdout: HTMLElement | null;\n  private actions: ActionI[] = [];\n\n  constructor(\n    private name: string,\n    private version: string,\n    stdinSelector: string,\n    stdoutSelector: string,\n    doc: HTMLDocument\n  ) {\n    this.$stdin = doc.querySelector(stdinSelector);\n    this.$stdout = doc.querySelector(stdoutSelector);\n    this.log(\"CoAnMoPluginCliV1()\");\n\n    if (this.$stdin)\n      this.$stdin.addEventListener(\"keydown\", (evt: KeyboardEvent) => {\n        if (this.$stdin && evt.key === \"Enter\") this.run(this.$stdin.value);\n      });\n  }\n\n  addActions(actions: ActionI[]) {\n    actions.forEach(action => this.actions.push(action));\n  }\n\n  focusOnInput() {\n    if (this.$stdin) this.$stdin.focus();\n  }\n\n  log(message: string) {\n    if (!this.$stdout) return;\n    this.$stdout.innerHTML += `\\n${message}`;\n    this.$stdout.scroll(0, 999999);\n  }\n\n  run(command: string) {\n    if (!this.$stdin) return;\n    const [actionName, ...args] = command.trim().split(/\\s+/);\n    const actionNameLc = actionName.toLowerCase(); // because, iPad keyboard\n    if (actionName === \"\") {\n      this.$stdin.value = \"\";\n      return this.log(\">\");\n    }\n    const action = this.actions.find(actn => actn.name === actionNameLc);\n    if (!action)\n      return this.log(`No such action '${actionNameLc}' - try 'help'`);\n    this.log(`> ${actionNameLc} ${args.join(' ')}`);\n    this.$stdin.value = \"\";\n    this.log(\n      action.fn(args, {\n        actions: this.actions,\n        name: this.name,\n        version: this.version\n      })\n    );\n  }\n}\n","import { ActionI, ActionMetaI } from \"coanmo-plugin-cli\";\n\nexport const help: ActionI = {\n  name: \"help\",\n  summary: \"Shows a help message\",\n  fn(args: string[], meta: ActionMetaI) {\n    const { actions, name, version } = meta;\n    const longest = actions.reduce(\n      (longest = 0, action: ActionI) => Math.max(longest, action.name.length),\n      0\n    );\n    if (args.length === 0)\n      return [\n        `${name} ${version} Actions:`,\n        ...actions.map(\n          (action: ActionI) =>\n            `${action.name.padEnd(longest + 2, \" \")}${action.summary}`\n        )\n      ].join(\"\\n\");\n    if (args.length !== 1)\n      return `'help' got ${args.length} args, expected 0 or 1 ${args.join()}`;\n    const actionNameLc = args[0].toLowerCase();\n    const action = actions.find(actn => actn.name === actionNameLc);\n    if (!action) return `No such action '${actionNameLc}'`;\n    return `${action.name}  ${action.summary}`;\n  }\n};\n","import { ActionI, ActionMetaI } from \"coanmo-plugin-cli\";\n\nexport enum Hue {\n  red = \"red\",\n  orange = \"orange\",\n  yellow = \"yellow\",\n  green = \"green\",\n  cyan = \"cyan\",\n  blue = \"blue\",\n  magenta = \"magenta\",\n  grey = \"grey\"\n}\n\nexport function stringToHue(string: string): Hue | void {\n  switch (string) {\n    case \"red\":\n      return Hue.red;\n    case \"orange\":\n      return Hue.orange;\n    case \"yellow\":\n      return Hue.yellow;\n    case \"green\":\n      return Hue.green;\n    case \"cyan\":\n      return Hue.cyan;\n    case \"blue\":\n      return Hue.blue;\n    case \"magenta\":\n      return Hue.magenta;\n    case \"grey\":\n      return Hue.grey;\n    default:\n      return undefined;\n  }\n}\n\nexport function getCurrentHue(doc: Document): Hue {\n  const hueClass = doc.body.className\n    .split(/\\s+/)\n    .find(className => className.slice(0, 4) === \"hue-\");\n  if (!hueClass) return Hue.blue; // `undefined` defaults to blue, if not found\n  const hue = stringToHue(hueClass.slice(4));\n  if (!hue) return Hue.blue; // 'hue-nope' defaults to blue\n  return hue;\n}\n\nexport const hue: ActionI = {\n  name: \"hue\",\n  summary: \"Gets/sets the color scheme\",\n  fn(args: string[], meta: ActionMetaI) {\n    const currentHue = getCurrentHue(document);\n    if (args.length === 0) return `${currentHue}`;\n    if (args.length !== 1)\n      return `'hue' got ${args.length} args, expected 0 or 1 ${args.join()}`;\n    const newHue = stringToHue(args[0]);\n    if (!newHue)\n      return `'hue' got unexpected argument '${args[0]}' — try 'green'`;\n    document.body.classList.remove(`hue-${currentHue}`);\n    document.body.classList.add(`hue-${args[0]}`);\n    return `Was ${currentHue}, now ${args[0]}`;\n  }\n};\n","import { ActionI } from \"coanmo-plugin-cli\";\n\nexport const random: ActionI = {\n  name: \"random\",\n  summary: \"Shows a random number\",\n  fn() {\n    return `${Math.random()}`.slice(2);\n  }\n};\n","import { ActionI, ActionMetaI } from \"coanmo-plugin-cli\";\n\nexport const version: ActionI = {\n  name: \"version\",\n  summary: \"Shows the CoAnMo’s version\",\n  fn(args: string[], meta: ActionMetaI) {\n    const { name, version } = meta;\n    return `${name} ${version}`;\n  }\n};\n","import { help } from \"./help\";\nimport { hue } from \"./hue\";\nimport { random } from \"./random\";\nimport { version } from \"./version\";\n\nexport const actions = [help, hue, random, version];\n","import { CoAnMoPluginCliV1 } from \"coanmo-plugin-cli\";\nimport { actions } from \"./Actions/actions\";\n\nclass CoAnMoWhichImportsCLI {\n  private cli: CoAnMoPluginCliV1;\n\n  constructor(\n    private name: string,\n    private version: string,\n    selector: string,\n    doc: HTMLDocument\n  ) {\n    this.cli = new CoAnMoPluginCliV1(\n      name,\n      version,\n      `${selector} .stdin`,\n      `${selector} .stdout`,\n      doc\n    );\n\n    this.cli.addActions(actions);\n    this.cli.log(\"Ready\");\n  }\n\n  receiveMessage(event: MessageEvent) {\n    // @TODO add validation and security\n    if (typeof event.data === \"string\") this.cli.run(event.data);\n  }\n}\n\nconst coanmo = new CoAnMoWhichImportsCLI(\n  \"CoAnMo Which Imports CLI\",\n  \"1.0.6\",\n  \"#coanmo-which-imports-cli\",\n  document\n);\n\nwindow.addEventListener(\n  \"message\",\n  (event: MessageEvent) => coanmo.receiveMessage(event),\n  false\n);\n"]}